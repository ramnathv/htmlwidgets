% Generated by roxygen2 (4.0.2): do not edit by hand
\name{withJS}
\alias{JSEvals}
\alias{withJS}
\title{Mark elements of a list as the JavaScript code}
\usage{
withJS(expr)

JSEvals(list)
}
\arguments{
\item{expr}{an \emph{unevaluated} R expression that, when evaluated, returns
a list of which some elements are to be marked as JavaScript code using
\code{JS()}}

\item{list}{a list in which the elements that should be evaluated as
JavaScript are to be identified}
}
\value{
For \code{withJS}, the argument \code{expr} is evaluated and the
  result is returned. For \code{JSEvals()}, a character vector with elements
  of the form \samp{x.y.N.z} is returned; a character string \samp{x.y.N.z}
  means the element \code{list$x$y[[N]]$z} is JavaScript code. On the
  JavaScript side, you can pass \samp{x.y.N.z} to the \code{member} argument
  of the helper function \code{HTMLWidgets.evaluateStringMember(o, member)}
  in this package to evaluate the corresponding element in the object
  \code{o} where \code{o} is the JavaScript object converted from the R list
  that was passed to \code{JSEvals()}.
}
\description{
The function \code{withJS()} evaluates its argument \code{expr} in an
environment that has defined a function \code{JS()} to mark a character
vector with a special class, so that this character vector will be treated as
literal JavaScript code that will be evaluated, instead of an ordinary
character string. The function \code{JSEvals()} identifies the elements of a
list that should be evaluated as JavaScript.
}
\note{
The function \code{JS()} is only visible \emph{inside} \code{withJS()}.
  It is not an exported function in this package. Its only goal is to provide
  a way for users to mark list elements, and it may be meaningless beyond
  this goal.

  For package authors, make sure you do not evaluate the expression before
  passing it to \code{withJS()}. You can achieve this by passing
  \code{substitute(foo)} to \code{withJS()} in your function, where
  \code{foo} is the function argument value. See examples below.
}
\examples{
ex <- expression(list(x = 1, y = JS('function(){return true;}')))
htmlwidgets::withJS(ex)

# use withJS() in another function: make sure you use substitute() so the
# argument is not evaluated
f1 <- function(options) htmlwidgets::withJS(substitute(options))
f1(list(x = 1, y = JS('function(){return true;}')))

\donttest{# do not pass an argument directly to withJS(), e.g.
f2 <- function(options) htmlwidgets::withJS(options)
f2(list(x = 1, y = JS('function(){return true;}')))
# you will get an error "could not find function JS"
}
obj <- f1(list(x = 1, y = list(a = 2, b = JS('[1, 2, null]')), z = list(3, JS('{"a": 4}'))))
htmlwidgets::JSEvals(obj)
}

